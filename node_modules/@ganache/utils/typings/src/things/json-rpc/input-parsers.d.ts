/// <reference types="node" />
export type JsonRpcInputArg = number | bigint | string | Buffer;
/**
 * Parse and validate a {@link number} to {@link Buffer} as internal representation for a JSON-RPC data type.
 * @param {number} input - must be a positive, finite integer, or null.
 * @returns {Buffer}
 */
export declare function parseAndValidateNumberInput(input: number): Buffer;
/**
 * Parse and validate a {@link bigint} to {@link Buffer} as internal representation for a JSON-RPC data type.
 * @param  {bigint} input - must be a positive integer, or null.
 * @returns {Buffer}
 */
export declare function parseAndValidateBigIntInput(input: bigint): Buffer;
/**
 * Parse and validate a {@link string} to {@link Buffer} as internal representation for a JSON-RPC data type.
 * @param  {string} input - must be a hex encoded integer prefixed with "0x".
 * @returns Buffer
 */
export declare function parseAndValidateStringInput(input: string): Buffer;
//# sourceMappingURL=input-parsers.d.ts.map